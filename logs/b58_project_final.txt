CSCB58 Project File: Summer 2017
Project Details
---------------
Team Name: Aloha Snackbar

Project Title: SpyMangler

Simple Project Description: Two players that work together to successfully encrypt/decrypt each other’s messages with “random elements” added to each level they progress through.


PLAYER OBJECTIVES AND HOW TO WIN
——————————————————————————————————————
PLAYER 1 OBJECTIVE: You play as a WWII British Spy in Casablanca that uses the “morse code” to send encrypted German lock codes to a friendly receiver in Britain.
note: to make the game easier, player1 should think of an input password thats “intuitive” to player 2, for example if player 2 was Dr. Harrington, I would choose the password to be “MANGLER”, this way Harrington would have the intuition to guess the password midway through.

PLAYER 2 OBJECTIVES: You play as a WWII receiver that receives morse code from a friendly spy and tries to decode the password by navigating through key-tumbler locks. Based on the length of the password and the ability for player 2 to guess the password, player 1 and 2 should mutually agree on a suitable number of tries player 2 gets to successfully go through all key-tumbler locks before he loses.

HOW TO WIN:
Due to the open endedness of the game, we decided that its best for the two players to decide specifically who wins and loses.
note: the variable x is up to the players to decide
-player 1 wins if
	-player 2 inputs the wrong values (line/dot/nothing) x times
-player 2 wins if
	-player 2 successfully goes through all key-tumblers without inputting the wrong values x times


.README(INSTRUCTIONS TO PLAY) FOR PLAYER 1
—————————————————————————————————————————————————
PLAYER 1 DESCRIPTION: 
Can encrypt any letter up to 10 letters, each letter corresponds to its own pin-tumbler lock. Player uses KEY0 to input a dot or line. The lines and dots inputted will be shown on the DE2 board using LEDR0-LEDR9. Since the max dots/lines for a single letter in the morse code is 5, every 2 LEDRs represent a dot/line, thus total of 10LEDRs shown. 11 = line, 01 = dot. During this process, values are stored in a 10x10 RAM(10 tumblers x 10 bits) so that player2 will be able to access these values later on.


PLAYER 1 INPUT OPTIONS:
a) KEY0: Load letter(tumbler)
remark1,Press and hold for 3 sec = line, press for 1 sec = dot, press nothing for nothing
remark2,On the LEDR, line = 11, dot = 01, nothing = 00)
b) KEY1: Go to the next letter(tumbler)
remark1,HEX2 will show which tumbler the player is on
c) KEY2: End turn
remark1,HEX0 will display 2 once pressed, indicating it’s player2’s turn to decrypt all letters
d) KEY3: Reset the indicators
remark1, player should press this every time they switch to a different letter(tumbler)
remark2, in the case that the player screws up the input press KEY3


PLAYER 1 INPUT EXAMPLE: 
Want to encrypt the word “KAPPA”, LEDRs will be inputed in the (<————) direction

K = line dot line nothing nothing, however displayed as LEDR9-0: 00 00 11 01 11
input -> KEY0(3), KEY0(1), KEY0(3), check indicator lights ok then, KEY1, KEY3

A = dot line nothing nothing nothing, however displayed as LEDR9-0: 00 00 00 01 11
input -> KEY0(1), KEY0(3), check indicator lights ok then, KEY1, KEY3

P = dot line line dot nothing however displayed as LEDR9-0: 00 01 11 11 01
input -> KEY0(1), KEY0(3), KEY0(3), KEY0(1), check indicator lights ok then, KEY1, KEY3

P = dot line line dot nothing however displayed as LEDR9-0: 00 01 11 11 01
input -> KEY0(1), KEY0(3), KEY0(3), KEY0(1), check indicator lights ok then, KEY1, KEY3

A = dot line nothing nothing nothing, however displayed as LEDR9-0: 00 00 00 01 11
input -> KEY0(1), KEY0(3), check indicator lights ok then, KEY1, KEY3

lastly, KEY2 to end turn.



.README(INSTRUCTIONS TO PLAY) FOR PLAYER 2
———————————————————————————————————————————————————
PLAYER 2 DESCRIPTION: Decrypts the letters that player 1 encrypted. For the positions on the first key-tumbler, you must guess whether the position is a line, dot or nothing. Decrypting the first letter (key-tumbler) is completely based on luck. However after that, you can use intuition reveal the rest of the letters, very similar to wheel of fortune. To output the VGA display, scroll through KEY0 to output a red block(nothing), white block(dot) or unfilled white block(line). Then press KEY1 to go to the next letter. If your output is correct, then LEDR4 will flash green.

hint: Always refer back to the morse code translator so you can make an educated guess on your output. This will minimize the number of times you output wrong values and perhaps give you “intuition” as to what the password is! After you’ve finished the 5th position on the key-tumbler, you will automatically go onto the next tumbler and so forth.

PLAYER 2 OUTPUT OPTIONS
a) KEY0: Load letter(tumbler)
remark, red block = nothing, white block = dot, unfilled white block = line
b) KEY1: Go to the next letter(tumbler)
remark1, if output is wrong, there is no flash on LEDR4 and you do not move onto the next block on the key-tumbler. 
remark2, if output is correct, there will be a green flash on LEDR4 and you will move onto the next block on the key-tumbler
c) KEY2: End turn
d) KEY3: Reset the indicators

PLAYER 2 OUTPUT EXAMPLE: 
Want to encrypt the word “xxxxx”(unknown word), assume they have a PH.D in memeology and thus has “intuition” of the word “KAPPA”(p1’s input)

Try Output: filled white block(dot), Result: no LEDR4 flash, Next Step: current position must be unfilled white block
*failed random guess, now we know for sure the position must be an unfilled white block(line)

Try Output: unfilled white block(line), Result: LED4 flash, Next Step: try next position
*educated guess by elimination

Try Output: unfilled white block(line), Result: no LEDR4 flash, Next Step: position could be white/red block
*random guess failed, next position could be white/red block

Try Output: white block(dot), Result: LEDR4 flash, Next Step: try next position
*random guess success

Try Output: unfilled white block(line), Result: LEDR4 flash, Next Step: try next position
*random guess success
*at this point, based on the morse code the letter is either C(line,dot,line,line) or K(line,dot,line)

Try Output: red block(nothing), Result: LEDR4 flash, Next Step: finished word, next key-tumbler
*we’ve discovered the letter is K, move to next key-tumbler

fast forward to when we have guessed the proceeding two key-tumblers, now we know half of the word stands at K A P x x, with two unknown “x”. Based on player 2 “intuition”, I made a guess that the word is KAPPA, which simplifies my process very much.



SOURCE CODE + VIDEO PRESENTATION
———————————————————————————————————————————————
Video URL: https://youtu.be/JSC6bmjZg3o

Code URL (please upload a copy of this file to your repository at the end of the project as well, it will
serve as a useful resource for future development): www.github.com/Kamiyaa/SpyMangler



PROPOSAL
————————————————————
What do you plan to have completed by the end of the first lab session?:
A:
1) Made the background graphics
2) Player 1 module
3) Ps2 keyboard module
4) Main module
5) Hex decoder module
6) Finish the FSM configurations/diagrams with each state going to what

What do you plan to have completed by the end of the second lab session?:
A:
2) Background graphics work perfectly, and is displayed on VGA display
3) Make RAM module
4) Player 2 module
5) Continue work on Main module
6) Morse translator module

What do you plan to have completed by the end of the third lab session?:
A: 
1) Continue work on Main module
2) Tumbler VGA module
3) Everything on DE2 board works perfectly, small bugs in Tumbler VGA is fine

What is your backup plan if things don’t work out as planned?
A: go on e-service, submit a petition for late withdrawal

What hardware will you need beyond the DE2 board 
(be sure to e-mail Brian if it’s anything beyond the basics to make sure there’s enough to go around)
A: VGA Display, that’s all!



MOTIVATIONS
————————————————————
How does this project relate to the material covered in CSCB58?: 
A: 1) Morse code will be used as a means of communication, covered in labs
2) PS/2 Keyboard has various pin assignments related to lab0 and overall structure of rewiring the DE2 board
2) FSM will be used for morse code, and throughout the game to indicate player turns and game state, FSM will be everywhere in our game.
3) RateDivider to change clock speeds for difficult levels and for morse code intervals.
4) HEX as a means of visual feedback for users.
5) Registers, used to hold values and be operated upon
6) VGA adaptor/screen to make graphics
7) RAM module, going beyond the course

Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):  
A: This game is unique in the sense that it allows 2 players to communicate through intuition. Player 1 putting in the word and after some hints, seeing if player 2 is able to guess out the word. I think it gives a sense of unique open-endedness that can’t be found on generic games such as pong, TRON and other retro games.

Why did you personally choose this project?: 
A: I’ve always loved anything about spies and spy movies. So I thought it would be cool to make a “wheel of fortune” style encryption/decryption game. It’s also designed to be very open-ended to both players, which I admire as an important aspect of any game.



ATTRIBUTIONS 
———————————————————
Provide a complete list of any external resources your project used (attributions should also be included in your code).
 - Hex decoder from lab5
 - RAM module from MODULE: altsyncram (File Name: ram32x4.v)
 - VGA adapter from lab6 and other online resources



UPDATES 
———————————————————
UPDATE 1: 07/02/17: Created Project Proposal
UPDATE 2: 07/06/17:
 - We have a working module that takes user input and tell whether input is a line or dot in morse code.
 - We have a working rate divider to make precision clock cycles
 - We have a working 1 character morse code comparer between player1 and player2
 - We have a working vga with primitative drawing functions
UPDATE 3: 07/13/17:
 - We tried to connect our player1 input using a PS/2 keyboard, however it doesn’t work and we reverted back to the original input methods
 - We made RAM memory storage to store inputs for player1 so that multiple inputs could be passed onto player2
 - Upgraded VGA to its main function, however has some display bugs to sort out
 - Worked on morse code translator further, got rid of some bugs
UPDATE 4: 07/20/17:
 - Redesigned the game to make it more achievable by the due date
 - Progress on VGA somewhat stagnant, still working on bugs
 - Tried to get RAM from player 1 input to VGA output, however failed, working on it over the weekend
UPDATE 5: 07/27/17:
 - DE2 board LEDR0-9 lights do not reset after going into a different key-tumbler (worked before but broke after some changes to code), however this was fixed during the 1 hour lab by pressing KEY3 to reset indicator lights each time
 - All displays bugs fixed, VGA display working perfectly in conjunction with RAM storage
 - Data flow problems fixed, data input and outputs moving smoothly according to diagram
 - Successfully linked RAM for player 1 -> player 2 -> VGA output
