CSCB58 Project File: Summer 2017

Team Member A
-------------
First Name: Jiayi
Last Name: Zhao
Student Number: 1003193313
UofT E-mail Address: jiayii.zhao@mail.utoronto.ca

Team Member B
-------------
First Name: Wenhui
Last Name: Zhao
Student Number: 1003349726
UofT E-mail Address: daniell.zhao@mail.utoronto.ca

Team Member C
-------------
First Name: Tsz Cheuk
Last Name: So
Student Number: 1003137562
UofT E-mail Address: tszcheuk.so@mail.utoronto.ca

Team Member D
-------------
First Name: Andrew
Last Name: Fung
Student Number: 1003443945
UofT E-mail Address: andrewr.fung@mail.utoronto.ca

Project Details
---------------
Project Title: SpyMangler

Simple Project Description: Two players that work together to successfully encrypt/decrypt each other’s messages with “random elements” added to each level they progress through.

ORIGINAL DESCRIPTION
——————————————————————————————————————————————————————————————————————
For every letter, there is a pin-tumbler that goes from up to down at a variable descend. In the case of the morse code, the pin will become blue if there is a rectangle, green if there is a not, and will remain red if there is nothing.
Example, Morse Code Letter [L] = dot,rectangle,dot,dot,nothing -> G,B,G,G,R

In CASUAL(lvl 1-6), the player is given the morse code translations and attempts to solve the mystery word letter by letter. Time is limited and the number of letters to translate increases as the level progresses

In ENIGMA(lvl 7-10), the player is given some rough code translations with a somewhat recognizable pattern for letters A-Z and 1-9. In other words, if you are given the translation for A,C,D,G you could probably find all letters A-G as well.


WEEK 1 REVISED DESCRIPTION
——————————————————————————————————————————————————————————————————————
Player1: Chooses any word to encrypt and inputs the number of letters in the word via the DE2 board switches. Then, a number pin-tumbler locks will come up based on the number of letters there are. Based on the morse code, the player will use rectangles and dots to encrypt the letter. There are four options here
a) KEY0: Load (press 3 times for rectangle, press 1 time for dot, press 0 for nothing)
b) KEY1: Go to the next letter
c) KEY2: Go to the previous letter
d) KEY3: Finish word
After the word is complete, the encrypted message will be sent to player2 

Player2: Tries to decrypt the word. For every letter, there is a pin-tumbler that will go up to the top if KEY0 is pressed. From there, it goes descends at a fixed pace downwards. If the pin-tumbler turns green for 2 seconds=>its a rectangle, quick flash=> its a dot. Player can then go to the morse code index to find out the encrypted word. The four options here are,
a) KEY0: Ascend the pin-tumbler to the top, will descend automatically
b) KEY1: Go to the next letter
c) KEY2: Go to the previous letter
d) KEY3: Finish decrypting, go to answer stage
Enter the decrypted message in binary, player 2 either wins or loses

Further Intentions: For every level that the two players successfully progress through, there will be a “new element” added to each level to spice things up a notch. Currently drawing the blueprints for the “new elements”

WEEK 2 DESCRIPTION
——————————————————————————————————————————————————————————————————————
Player1: Can encrypt any letter up to 32 letters, each letter corresponds to its own pin-tumbler lock. Player uses the PS2 keyboard to input the letter they want. The letter will show up on HEX1/HEX0 as a PS/2 scan code. During this process, the scan code is translated to an 8 bit input and will be stored in the 32x8 RAM. 
nothing = 00, 01 = dot, 11 = line, default = 10, 
eg. Input on PS/2 = F, F = 2B, 2B = dot dot line dot = 01011101
eg. Input on PS/2 = U, U = 3C, 3C = dot dot line nothing = 01011100

There are four options here
a) KEY0:
b) KEY1: Go to the next letter
c) KEY2: Go to the previous letter
d) KEY3: Finish word
After the word is complete, the encrypted message will be sent to player2 

Player2: Uses 

Tries to decrypt the word. For every letter, there is a pin-tumbler that will go up to the top if KEY0 is pressed. From there, it goes descends at a fixed pace downwards. If the pin-tumbler turns green for 2 seconds=>its a rectangle, quick flash=> its a dot. Player can then go to the morse code index to find out the encrypted word. The four options here are,
a) KEY0: Ascend the pin-tumbler to the top, will descend automatically
b) KEY1: Go to the next letter
c) KEY2: Go to the previous letter
d) KEY3: Finish decrypting, go to answer stage
Enter the decrypted message in binary, player 2 either wins or loses

Further Intentions: For every level that the two players successfully progress through, there will be a “new element” added to each level to spice things up a notch. Currently drawing the blueprints for the “new elements”

WEEK 3 DESCRIPTION
——————————————————————————————————————————————————————————————————————
Player1 Objective: A WWII British Spy in occupied Casablanca that uses the “morse code” to send encrypted German lock codes to a friendly spy back at the homeland.

Player1 Description: Can encrypt any letter up to 10 letters, each letter corresponds to its own pin-tumbler lock. Player uses KEY0 to input a dot or line. The lines and dots inputted will be shown on the DE2 board using LEDR0-LEDR9. During this process, values are stored in a 10x10 RAM(10 tumblers x 10 bits) so that player2 will be able to access these values. 

Player1 Input Options:
a) KEY0: Load letter(Press and hold for 3 sec = line, press for 1 sec = dot, press nothing for nothing. On the LEDR, line = 11, dot = 01, nothing = 00)
b) KEY1: Go to the next letter
c) KEY2: End turn
d) KEY3: Reset the letter
After the word is complete, the encrypted message will be sent to player2 

Player1 Input Example: Want to encrypt the word “KAPPA”
K = line dot line nothing nothing (LEDR: 1101110000)
A = dot line nothing nothing nothing (LEDR: 0111000000)
P = dot line line dot nothing (LEDR: 0111110100)
P = dot line line dot nothing (LEDR: 0111110100)
A = dot line nothing nothing nothing (LEDR: 0111000000)

Player2 Objectives: Receives morse code from a friendly spy and tries to decode the message by navigating through n_number of key-tumbler locks. You didn’t think it was that easy did you? The German Gestapo have activated traps in the lock codes. If player 2 takes a long time(dependent on # of letters) to solve, or enters the wrong letter, a bomb will trigger and player 2 will be dead!
 
Player2 Description:  ———————— 
Tries to decrypt the word. For every letter, there is a pin-tumbler that will go up to the top if KEY0 is pressed. From there, it goes descends at a fixed pace downwards. If the pin-tumbler turns green for 2 seconds=>its a rectangle, quick flash=> its a dot. Player can then go to the morse code index to find out the encrypted word.

Player2 Input Options:  ———————— 
a) KEY0: Ascend the pin-tumbler to the top, will descend automatically
b) KEY1: Go to the next letter
c) KEY2: Go to the previous letter
d) KEY3: Finish decrypting, go to answer stage
Enter the decrypted message in binary, player 2 either wins or loses


Player2 Input Example: ———————— 

Further Intentions: For every level that the two players successfully progress through, there will be a “new element” added to each level to spice things up a notch. Currently drawing the blueprints for the “new elements”


Video URL:

Code URL (please upload a copy of this file to your repository at the end of the project as well, it will
serve as a useful resource for future development):


Proposal
--------

What do you plan to have completed by the end of the first lab session?:  ———————— 
A:
1) Made the background graphics, established CASUAL level codes to its translator.
2) Work on the randomness of the words(will probably choose a random n-number word from a pool of n-number words.
3) Finish the FSM configurations with each state going to what

What do you plan to have completed by the end of the second lab session?:  ———————— 
A:
1) Begin work on ENIGMA, try to get simple patterns to work. Eg, given all letters except A,E,H. Figure out letters using a simple pattern, +1 dot every 3rd letter or a combination of x-num of dots and y-num of rectangles every x,y letter.

What do you plan to have completed by the end of the third lab session?:  ———————— 
A: 
1) Finish the ENIGMA difficulty with a fully working pattern generator
2) Add some narrative to the game
3) Improve graphics designs

What is your backup plan if things don’t work out as planned?
A: go on e-service, submit a petition for late withdrawal

What hardware will you need beyond the DE2 board 
(be sure to e-mail Brian if it’s anything beyond the basics to make sure there’s enough to go around)
A: VGA


Motivations
-----------
How does this project relate to the material covered in CSCB58?:  ———————— 
A: 
1) Morse code will be used as a means of communication without a keyboard.
2) FSM will be used to detect morse code, and be used throughout the game to indicate player turns and game state.
3) RateDivider to change clock speeds for difficult levels and for morse code intervals.
4) HEX as a means of visual feedback for users.
5) registers, used to hold values and be operated upon
6) VGA adaptor/screen to make graphics

Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):  ———————— 
A: Solving puzzles can be challenging and either results in a rewarding mood, or a frustrated one. Either way, players will find the ‘ENIGMA’ levels interesting as they are randomly generated to be solved. Similar to why people like watching wheel of fortune on TV. The sense of mystery eventually translates to interest.

Why did you personally choose this project?:  ———————— 
A: Interested in the strategic side of things. So I wanted to see what strategies people employ to solve decryption problems. Not to mention the importance of code cracking in WW2.


Attributions  ———————— 
------------
Provide a complete list of any external resources your project used (attributions should also be included in your
code).
 - Hex decoder from lab5

Updates  ———————— 
-------
UPDATE 1: 07/02/17: Created Project Proposal
UPDATE 2: 07/06/17:
 - We have a working module that takes user input and tell whether input is a line or dot in morse code.
 - We have a working rate divider to make precision clock cycles
 - We have a working 1 character morse code comparer between player1 and player2
 - We have a working vga with primitative drawing functions
UPDATE 3: 07/13/17:
 - We tried to connect our player1 input using a PS/2 keyboard, however it doesn’t work and we reverted back to the original input methods
 - We made RAM memory storage to store inputs for player1 so that multiple inputs could be passed onto player2

